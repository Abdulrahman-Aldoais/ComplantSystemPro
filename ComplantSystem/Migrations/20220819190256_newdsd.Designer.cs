// <auto-generated />
using System;
using ComplantSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComplantSystem.Migrations
{
    [DbContext(typeof(AppCompalintsContextDB))]
    [Migration("20220819190256_newdsd")]
    partial class newdsd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BenefCommunicationBeneficiarie", b =>
                {
                    b.Property<string>("BenefCommunicationsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BeneficiariesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BenefCommunicationsId", "BeneficiariesId");

                    b.HasIndex("BeneficiariesId");

                    b.ToTable("BenefCommunicationBeneficiarie");
                });

            modelBuilder.Entity("ComplantSystem.Compalints_Solution", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BeneficiarieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompalintId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentSolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSolution")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadsComplainteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAddSolutionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiarieId");

                    b.HasIndex("CompalintId");

                    b.HasIndex("UploadsComplainteId");

                    b.HasIndex("UserAddSolutionId");

                    b.ToTable("Compalints_Solutions");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            ConcurrencyStamp = "fabb22b6-dcdc-4c0b-9312-612f3a2a4eac",
                            Name = "AdminGeneralFederation",
                            NormalizedName = "ADMINGENERALFEDERATION"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            ConcurrencyStamp = "2a9d045e-1fa3-43dd-ab26-6f21e42ba4d5",
                            Name = "AdminGovernorate",
                            NormalizedName = "ADMINGOVERNORATE"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1wdd431ffbbf",
                            ConcurrencyStamp = "9445c51b-110c-4835-89be-17fa2396c0f0",
                            Name = "AdminDirectorate",
                            NormalizedName = "ADMINDIRECTORATE"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1rdd431ffbbf",
                            ConcurrencyStamp = "2d809ad6-ff1c-4861-b1c4-a058f50f51de",
                            Name = "AdminSubDirectorate",
                            NormalizedName = "ADMINSUBDIRECTORATE"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-1445-baaf-1rdd431ffbbf",
                            ConcurrencyStamp = "8c398d85-0501-4c99-aabd-d1bb7f69597a",
                            Name = "AdminVillages",
                            NormalizedName = "ADMINVILLAGES"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-1445-gaaf-1rdd431ffbbf",
                            ConcurrencyStamp = "cfda7f99-8945-42df-882a-10d591413a6b",
                            Name = "Beneficiarie",
                            NormalizedName = "BENEFICIARIE"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("int");

                    b.Property<int?>("SubDirectorateId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("SubDirectorateId");

                    b.HasIndex("VillageId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ComplantSystem.Models.BenefCommunication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("BeneficiariesId")
                        .HasColumnType("int");

                    b.Property<string>("CommunDescribed")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("TypeCommunicationId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BenefCommunication");
                });

            modelBuilder.Entity("ComplantSystem.Models.Beneficiarie", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasComment("تحديد وقت ادخال الصف في قاعدية البيانات");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubDirectorateId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeBeneficiariId")
                        .HasColumnType("int");

                    b.Property<string>("TypeBeneficiarisId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Update_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("SubDirectorateId");

                    b.HasIndex("TypeBeneficiarisId");

                    b.HasIndex("VillageId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("ComplantSystem.Models.Communication_Counter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BenefCommunicationId")
                        .HasColumnType("int");

                    b.Property<string>("BenefCommunicationsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BeneficiarieId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiariesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Communic_Counter")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BenefCommunicationsId");

                    b.HasIndex("BeneficiariesId");

                    b.ToTable("Communication_Counter");
                });

            modelBuilder.Entity("ComplantSystem.Models.Compalint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BeneficiarieId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CompDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CompDateUp")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<int?>("GovernorateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("HoUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropBeneficiarie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("int");

                    b.Property<int>("StagesComplaintId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCompalintId")
                        .HasColumnType("int");

                    b.Property<int?>("SubDirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("TitleComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("TypeComplaintId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiarieId");

                    b.HasIndex("DirectorateId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("HoUserId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("StagesComplaintId");

                    b.HasIndex("StatusCompalintId");

                    b.HasIndex("SubDirectorateId");

                    b.HasIndex("TypeComplaintId1");

                    b.HasIndex("VillageId");

                    b.ToTable("UploadsComplainte");
                });

            modelBuilder.Entity("ComplantSystem.Models.Directorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Directorates");
                });

            modelBuilder.Entity("ComplantSystem.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "صنعاء"
                        },
                        new
                        {
                            Id = 2,
                            Name = " تعز"
                        },
                        new
                        {
                            Id = 3,
                            Name = "الحديدة"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.LimitationOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserResponsibleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LimitationOrders");
                });

            modelBuilder.Entity("ComplantSystem.Models.Proposal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("BeneficiarieId")
                        .HasColumnType("int");

                    b.Property<string>("BeneficiarieId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateSubmeted")
                        .HasColumnType("datetime2")
                        .HasComment("تحديد وقت ادخال الصف في قاعدية البيانات");

                    b.Property<string>("DescProposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitileProposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiarieId1");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("ComplantSystem.Models.Society", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Societys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "جمعية البن"
                        },
                        new
                        {
                            Id = 2,
                            Name = "جمعية الالبان"
                        },
                        new
                        {
                            Id = 3,
                            Name = "جمعية الحبوب"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.StagesComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StagesComplaints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "القرية"
                        },
                        new
                        {
                            Id = 2,
                            Name = "العزلة"
                        },
                        new
                        {
                            Id = 3,
                            Name = "المديرية"
                        },
                        new
                        {
                            Id = 4,
                            Name = "المحافظة"
                        },
                        new
                        {
                            Id = 5,
                            Name = "الإتحاد العام"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.StatusCompalint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusCompalints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "جديدة"
                        },
                        new
                        {
                            Id = 2,
                            Name = "محلولة"
                        },
                        new
                        {
                            Id = 3,
                            Name = "مرفوضة"
                        },
                        new
                        {
                            Id = 4,
                            Name = "معلقة"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.SubDirectorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DirectorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorateId");

                    b.ToTable("SubDirectorates");
                });

            modelBuilder.Entity("ComplantSystem.Models.TypeBeneficiari", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("TypeBeneficiari");
                });

            modelBuilder.Entity("ComplantSystem.Models.TypeComplaint", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UsersAddTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UsersAddTypeId");

                    b.ToTable("TypeComplaints");

                    b.HasData(
                        new
                        {
                            Id = "773f1d3b-37c3-43b6-952f-eea3521b133c",
                            CreatedDate = new DateTime(2022, 8, 19, 22, 2, 54, 491, DateTimeKind.Local).AddTicks(237),
                            Type = "زراعية"
                        },
                        new
                        {
                            Id = "0ef2675f-dde2-4e54-a7e2-6ae5c9c28520",
                            CreatedDate = new DateTime(2022, 8, 19, 22, 2, 54, 491, DateTimeKind.Local).AddTicks(804),
                            Type = "فساد"
                        },
                        new
                        {
                            Id = "0d25dd0c-aab4-49e2-ac63-53c97028d448",
                            CreatedDate = new DateTime(2022, 8, 19, 22, 2, 54, 491, DateTimeKind.Local).AddTicks(1039),
                            Type = "مماطلة"
                        },
                        new
                        {
                            Id = "d13662bc-0525-4368-acb0-e3755b03ef1b",
                            CreatedDate = new DateTime(2022, 8, 19, 22, 2, 54, 491, DateTimeKind.Local).AddTicks(1051),
                            Type = "إرتشاء"
                        });
                });

            modelBuilder.Entity("ComplantSystem.Models.UploadsComplainte", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectoratesId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GovernoratesId")
                        .HasColumnType("int");

                    b.Property<string>("HoUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropBeneficiarie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("int");

                    b.Property<int>("StagesComplaintId")
                        .HasColumnType("int");

                    b.Property<int>("StatusCompalintId")
                        .HasColumnType("int");

                    b.Property<int?>("SubDirectoratesId")
                        .HasColumnType("int");

                    b.Property<string>("TitleComplaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeComplaintId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VillagesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectoratesId");

                    b.HasIndex("GovernoratesId");

                    b.HasIndex("HoUserId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("StagesComplaintId");

                    b.HasIndex("StatusCompalintId");

                    b.HasIndex("SubDirectoratesId");

                    b.HasIndex("TypeComplaintId");

                    b.HasIndex("VillagesId");

                    b.ToTable("UploadsComplaintes");
                });

            modelBuilder.Entity("ComplantSystem.Models.UsersCommunication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Titile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UsersHasId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsersHasId");

                    b.ToTable("UsersCommunications");
                });

            modelBuilder.Entity("ComplantSystem.Models.Village", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubDirectorateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubDirectorateId");

                    b.ToTable("Villages");
                });

            modelBuilder.Entity("BenefCommunicationBeneficiarie", b =>
                {
                    b.HasOne("ComplantSystem.Models.BenefCommunication", null)
                        .WithMany()
                        .HasForeignKey("BenefCommunicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.Beneficiarie", null)
                        .WithMany()
                        .HasForeignKey("BeneficiariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ComplantSystem.Compalints_Solution", b =>
                {
                    b.HasOne("ComplantSystem.Models.Beneficiarie", "Beneficiaries")
                        .WithMany()
                        .HasForeignKey("BeneficiarieId");

                    b.HasOne("ComplantSystem.Models.Compalint", null)
                        .WithMany("CompalintsHasSolutions")
                        .HasForeignKey("CompalintId");

                    b.HasOne("ComplantSystem.Models.UploadsComplainte", "CompalintsHasSolution")
                        .WithMany("Compalints_Solutions")
                        .HasForeignKey("UploadsComplainteId");

                    b.HasOne("ComplantSystem.Models.ApplicationUser", "UserAddSolution")
                        .WithMany("Compalints_Solutions")
                        .HasForeignKey("UserAddSolutionId");

                    b.Navigation("Beneficiaries");

                    b.Navigation("CompalintsHasSolution");

                    b.Navigation("UserAddSolution");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUser", b =>
                {
                    b.HasOne("ComplantSystem.Models.Directorate", "Directorates")
                        .WithMany("Users")
                        .HasForeignKey("DirectorateId");

                    b.HasOne("ComplantSystem.Models.Governorate", "Governorates")
                        .WithMany("Users")
                        .HasForeignKey("GovernorateId");

                    b.HasOne("ComplantSystem.Models.ApplicationRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.HasOne("ComplantSystem.Models.Society", "Societies")
                        .WithMany("Users")
                        .HasForeignKey("SocietyId");

                    b.HasOne("ComplantSystem.Models.SubDirectorate", "SubDirectorate")
                        .WithMany("Users")
                        .HasForeignKey("SubDirectorateId");

                    b.HasOne("ComplantSystem.Models.Village", "Village")
                        .WithMany("Users")
                        .HasForeignKey("VillageId");

                    b.Navigation("Directorates");

                    b.Navigation("Governorates");

                    b.Navigation("Role");

                    b.Navigation("Societies");

                    b.Navigation("SubDirectorate");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComplantSystem.Models.Beneficiarie", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("ComplantSystem.Models.Directorate", "Directorate")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("DirectorateId");

                    b.HasOne("ComplantSystem.Models.Governorate", "Governorate")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("GovernorateId");

                    b.HasOne("ComplantSystem.Models.SubDirectorate", "SubDirectorate")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("SubDirectorateId");

                    b.HasOne("ComplantSystem.Models.TypeBeneficiari", "TypeBeneficiaris")
                        .WithMany()
                        .HasForeignKey("TypeBeneficiarisId");

                    b.HasOne("ComplantSystem.Models.Village", "Village")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("VillageId");

                    b.Navigation("Admin");

                    b.Navigation("Directorate");

                    b.Navigation("Governorate");

                    b.Navigation("SubDirectorate");

                    b.Navigation("TypeBeneficiaris");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("ComplantSystem.Models.Communication_Counter", b =>
                {
                    b.HasOne("ComplantSystem.Models.BenefCommunication", "BenefCommunications")
                        .WithMany("CommunicationCounters")
                        .HasForeignKey("BenefCommunicationsId");

                    b.HasOne("ComplantSystem.Models.Beneficiarie", "Beneficiaries")
                        .WithMany()
                        .HasForeignKey("BeneficiariesId");

                    b.Navigation("BenefCommunications");

                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("ComplantSystem.Models.Compalint", b =>
                {
                    b.HasOne("ComplantSystem.Models.Beneficiarie", null)
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("BeneficiarieId");

                    b.HasOne("ComplantSystem.Models.Directorate", "Directorates")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("DirectorateId");

                    b.HasOne("ComplantSystem.Models.Governorate", "Governorates")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.ApplicationUser", "HoUser")
                        .WithMany()
                        .HasForeignKey("HoUserId");

                    b.HasOne("ComplantSystem.Models.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId");

                    b.HasOne("ComplantSystem.Models.StagesComplaint", "StagesComplaint")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("StagesComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.StatusCompalint", "StatusCompalint")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("StatusCompalintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.SubDirectorate", "SubDirectorates")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("SubDirectorateId");

                    b.HasOne("ComplantSystem.Models.TypeComplaint", "TypeComplaint")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("TypeComplaintId1");

                    b.HasOne("ComplantSystem.Models.Village", "Villages")
                        .WithMany("UploadsComplainte")
                        .HasForeignKey("VillageId");

                    b.Navigation("Directorates");

                    b.Navigation("Governorates");

                    b.Navigation("HoUser");

                    b.Navigation("Society");

                    b.Navigation("StagesComplaint");

                    b.Navigation("StatusCompalint");

                    b.Navigation("SubDirectorates");

                    b.Navigation("TypeComplaint");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("ComplantSystem.Models.Directorate", b =>
                {
                    b.HasOne("ComplantSystem.Models.Governorate", "Governorate")
                        .WithMany("Directorates")
                        .HasForeignKey("GovernorateId");

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("ComplantSystem.Models.Proposal", b =>
                {
                    b.HasOne("ComplantSystem.Models.Beneficiarie", "Beneficiarie")
                        .WithMany("SubmitionProposals")
                        .HasForeignKey("BeneficiarieId1");

                    b.Navigation("Beneficiarie");
                });

            modelBuilder.Entity("ComplantSystem.Models.SubDirectorate", b =>
                {
                    b.HasOne("ComplantSystem.Models.Directorate", "Directorate")
                        .WithMany("SubDirectorates")
                        .HasForeignKey("DirectorateId");

                    b.Navigation("Directorate");
                });

            modelBuilder.Entity("ComplantSystem.Models.TypeComplaint", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", "UsersAddType")
                        .WithMany()
                        .HasForeignKey("UsersAddTypeId");

                    b.Navigation("UsersAddType");
                });

            modelBuilder.Entity("ComplantSystem.Models.UploadsComplainte", b =>
                {
                    b.HasOne("ComplantSystem.Models.Directorate", "Directorates")
                        .WithMany()
                        .HasForeignKey("DirectoratesId");

                    b.HasOne("ComplantSystem.Models.Governorate", "Governorates")
                        .WithMany()
                        .HasForeignKey("GovernoratesId");

                    b.HasOne("ComplantSystem.Models.ApplicationUser", "HoUser")
                        .WithMany()
                        .HasForeignKey("HoUserId");

                    b.HasOne("ComplantSystem.Models.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId");

                    b.HasOne("ComplantSystem.Models.StagesComplaint", "StagesComplaint")
                        .WithMany()
                        .HasForeignKey("StagesComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.StatusCompalint", "StatusCompalint")
                        .WithMany()
                        .HasForeignKey("StatusCompalintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.SubDirectorate", "SubDirectorates")
                        .WithMany()
                        .HasForeignKey("SubDirectoratesId");

                    b.HasOne("ComplantSystem.Models.TypeComplaint", "TypeComplaint")
                        .WithMany()
                        .HasForeignKey("TypeComplaintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComplantSystem.Models.Village", "Villages")
                        .WithMany()
                        .HasForeignKey("VillagesId");

                    b.Navigation("Directorates");

                    b.Navigation("Governorates");

                    b.Navigation("HoUser");

                    b.Navigation("Society");

                    b.Navigation("StagesComplaint");

                    b.Navigation("StatusCompalint");

                    b.Navigation("SubDirectorates");

                    b.Navigation("TypeComplaint");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("ComplantSystem.Models.UsersCommunication", b =>
                {
                    b.HasOne("ComplantSystem.Models.ApplicationUser", "UsersHas")
                        .WithMany()
                        .HasForeignKey("UsersHasId");

                    b.Navigation("UsersHas");
                });

            modelBuilder.Entity("ComplantSystem.Models.Village", b =>
                {
                    b.HasOne("ComplantSystem.Models.SubDirectorate", "SubDirectorate")
                        .WithMany("Villages")
                        .HasForeignKey("SubDirectorateId");

                    b.Navigation("SubDirectorate");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ComplantSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Compalints_Solutions");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ComplantSystem.Models.BenefCommunication", b =>
                {
                    b.Navigation("CommunicationCounters");
                });

            modelBuilder.Entity("ComplantSystem.Models.Beneficiarie", b =>
                {
                    b.Navigation("SubmitionProposals");

                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("ComplantSystem.Models.Compalint", b =>
                {
                    b.Navigation("CompalintsHasSolutions");
                });

            modelBuilder.Entity("ComplantSystem.Models.Directorate", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("SubDirectorates");

                    b.Navigation("UploadsComplainte");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ComplantSystem.Models.Governorate", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("Directorates");

                    b.Navigation("UploadsComplainte");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ComplantSystem.Models.Society", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ComplantSystem.Models.StagesComplaint", b =>
                {
                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("ComplantSystem.Models.StatusCompalint", b =>
                {
                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("ComplantSystem.Models.SubDirectorate", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("UploadsComplainte");

                    b.Navigation("Users");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("ComplantSystem.Models.TypeComplaint", b =>
                {
                    b.Navigation("UploadsComplainte");
                });

            modelBuilder.Entity("ComplantSystem.Models.UploadsComplainte", b =>
                {
                    b.Navigation("Compalints_Solutions");
                });

            modelBuilder.Entity("ComplantSystem.Models.Village", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("UploadsComplainte");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
